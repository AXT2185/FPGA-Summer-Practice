-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sobel_sobel_Pipeline_VITIS_LOOP_114_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    WindowBuffer_25 : IN STD_LOGIC_VECTOR (7 downto 0);
    WindowBuffer_26 : IN STD_LOGIC_VECTOR (7 downto 0);
    WindowBuffer_24 : IN STD_LOGIC_VECTOR (7 downto 0);
    WindowBuffer_29 : IN STD_LOGIC_VECTOR (7 downto 0);
    WindowBuffer_27 : IN STD_LOGIC_VECTOR (7 downto 0);
    WindowBuffer_28 : IN STD_LOGIC_VECTOR (7 downto 0);
    data_p_keep_V_2 : IN STD_LOGIC_VECTOR (0 downto 0);
    data_p_strb_V_2 : IN STD_LOGIC_VECTOR (0 downto 0);
    cols : IN STD_LOGIC_VECTOR (31 downto 0);
    top_V_1 : IN STD_LOGIC_VECTOR (1 downto 0);
    mid_V_1 : IN STD_LOGIC_VECTOR (1 downto 0);
    btm_V_1 : IN STD_LOGIC_VECTOR (1 downto 0);
    op2_assign : IN STD_LOGIC_VECTOR (31 downto 0);
    cmp_i_i78 : IN STD_LOGIC_VECTOR (0 downto 0);
    dst_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_TVALID : OUT STD_LOGIC;
    dst_TREADY : IN STD_LOGIC;
    dst_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    dst_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    src_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    src_TVALID : IN STD_LOGIC;
    src_TREADY : OUT STD_LOGIC;
    src_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    src_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    LineBuffer_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    LineBuffer_2_ce0 : OUT STD_LOGIC;
    LineBuffer_2_we0 : OUT STD_LOGIC;
    LineBuffer_2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    LineBuffer_2_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    LineBuffer_2_ce1 : OUT STD_LOGIC;
    LineBuffer_2_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    LineBuffer_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    LineBuffer_1_ce0 : OUT STD_LOGIC;
    LineBuffer_1_we0 : OUT STD_LOGIC;
    LineBuffer_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    LineBuffer_1_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    LineBuffer_1_ce1 : OUT STD_LOGIC;
    LineBuffer_1_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    LineBuffer_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    LineBuffer_ce0 : OUT STD_LOGIC;
    LineBuffer_we0 : OUT STD_LOGIC;
    LineBuffer_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    LineBuffer_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    LineBuffer_ce1 : OUT STD_LOGIC;
    LineBuffer_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    cmp_i_i120 : IN STD_LOGIC_VECTOR (0 downto 0);
    WindowBuffer_33_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    WindowBuffer_33_out_ap_vld : OUT STD_LOGIC;
    WindowBuffer_35_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    WindowBuffer_35_out_ap_vld : OUT STD_LOGIC;
    WindowBuffer_31_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    WindowBuffer_31_out_ap_vld : OUT STD_LOGIC;
    WindowBuffer_34_out_i : IN STD_LOGIC_VECTOR (7 downto 0);
    WindowBuffer_34_out_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    WindowBuffer_34_out_o_ap_vld : OUT STD_LOGIC;
    WindowBuffer_30_out_i : IN STD_LOGIC_VECTOR (7 downto 0);
    WindowBuffer_30_out_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    WindowBuffer_30_out_o_ap_vld : OUT STD_LOGIC;
    WindowBuffer_32_out_i : IN STD_LOGIC_VECTOR (7 downto 0);
    WindowBuffer_32_out_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    WindowBuffer_32_out_o_ap_vld : OUT STD_LOGIC;
    data_p_keep_V_3_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    data_p_keep_V_3_out_ap_vld : OUT STD_LOGIC;
    data_p_strb_V_3_out : OUT STD_LOGIC_VECTOR (0 downto 0);
    data_p_strb_V_3_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of sobel_sobel_Pipeline_VITIS_LOOP_114_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dst_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal src_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln1027_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i120_read_read_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal btm_V_1_read_read_fu_196_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_V_reg_968 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_predicate_op57_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1027_reg_973 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_973_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1027_reg_973_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_reg_977 : STD_LOGIC_VECTOR (7 downto 0);
    signal data_p_last_V_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_p_last_V_reg_984 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_p_last_V_reg_984_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal data_p_last_V_reg_984_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal data_p_last_V_reg_984_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal data_p_last_V_reg_984_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal LineBuffer_addr_reg_989 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_1_addr_reg_994 : STD_LOGIC_VECTOR (10 downto 0);
    signal LineBuffer_2_addr_reg_999 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_strb_V_reg_1004 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal tmp_strb_V_reg_1004_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_1004_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_reg_1004_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_1009 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_1009_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_1009_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_reg_1009_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal WindowBuffer_31_load_reg_1014 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal WindowBuffer_35_load_reg_1019 : STD_LOGIC_VECTOR (7 downto 0);
    signal WindowBuffer_33_load_reg_1024 : STD_LOGIC_VECTOR (7 downto 0);
    signal WindowBuffer_30_out_load_reg_1029 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_502_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_1034 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_513_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_1039 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_524_p5 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_1045 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_1045_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln9_fu_569_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln9_reg_1053 : STD_LOGIC_VECTOR (9 downto 0);
    signal A00_fu_609_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal A00_reg_1058 : STD_LOGIC_VECTOR (10 downto 0);
    signal g_x_fu_760_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal g_x_reg_1063 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln36_fu_779_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln36_reg_1069 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_1074 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_1080 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter3_state5 : STD_LOGIC;
    signal zext_ln541_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal col_V_2_fu_154 : STD_LOGIC_VECTOR (12 downto 0);
    signal col_V_3_fu_432_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal data_p_strb_V_fu_158 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal data_p_keep_V_fu_162 : STD_LOGIC_VECTOR (0 downto 0);
    signal WindowBuffer_31_fu_166 : STD_LOGIC_VECTOR (7 downto 0);
    signal WindowBuffer_35_fu_170 : STD_LOGIC_VECTOR (7 downto 0);
    signal WindowBuffer_33_fu_174 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln1027_fu_423_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1019_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal M00_fu_535_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln10_3_fu_547_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln11_1_fu_555_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln9_1_fu_559_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln9_1_fu_565_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln7_fu_543_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal M00_1_fu_575_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal M01_1_fu_587_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln30_fu_595_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln11_fu_551_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_pix_6_fu_599_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln31_fu_605_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln29_fu_583_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal M01_fu_648_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln9_fu_659_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln13_fu_671_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_pix_5_fu_674_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln8_fu_655_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln10_1_fu_665_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln14_fu_689_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln14_fu_695_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_pix_fu_699_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_fu_713_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln10_fu_680_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln24_1_fu_729_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln10_fu_685_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_705_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln24_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln24_fu_754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_fu_746_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln24_fu_734_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln10_2_fu_668_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_pix_7_fu_768_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal S00_fu_773_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln10_fu_662_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal out_pix_4_fu_783_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_fu_797_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln46_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln46_fu_830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln46_fu_822_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln46_fu_813_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal g_y_fu_834_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln55_fu_842_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln55_1_fu_845_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal temp_fu_849_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_7_fu_855_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sobel_1_fu_863_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_677 : BOOLEAN;
    signal ap_condition_681 : BOOLEAN;
    signal ap_condition_684 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component sobel_mux_32_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    mux_32_8_1_1_U16 : component sobel_mux_32_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => LineBuffer_q1,
        din1 => LineBuffer_1_q1,
        din2 => LineBuffer_2_q1,
        din3 => top_V_1,
        dout => tmp_fu_502_p5);

    mux_32_8_1_1_U17 : component sobel_mux_32_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => LineBuffer_q1,
        din1 => LineBuffer_1_q1,
        din2 => LineBuffer_2_q1,
        din3 => mid_V_1,
        dout => tmp_1_fu_513_p5);

    mux_32_8_1_1_U18 : component sobel_mux_32_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => LineBuffer_q1,
        din1 => LineBuffer_1_q1,
        din2 => LineBuffer_2_q1,
        din3 => btm_V_1,
        dout => tmp_2_fu_524_p5);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter3_state5)) then 
                        ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter2;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    WindowBuffer_31_fu_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                WindowBuffer_31_fu_166 <= WindowBuffer_24;
            elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1027_reg_973_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                WindowBuffer_31_fu_166 <= tmp_fu_502_p5;
            end if; 
        end if;
    end process;

    WindowBuffer_33_fu_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                WindowBuffer_33_fu_174 <= WindowBuffer_25;
            elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1027_reg_973_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                WindowBuffer_33_fu_174 <= tmp_1_fu_513_p5;
            end if; 
        end if;
    end process;

    WindowBuffer_35_fu_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                WindowBuffer_35_fu_170 <= WindowBuffer_26;
            elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1027_reg_973_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                WindowBuffer_35_fu_170 <= tmp_2_fu_524_p5;
            end if; 
        end if;
    end process;

    col_V_2_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                col_V_2_fu_154 <= ap_const_lv13_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1027_fu_427_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                col_V_2_fu_154 <= col_V_3_fu_432_p2;
            end if; 
        end if;
    end process;

    data_p_keep_V_fu_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                data_p_keep_V_fu_162 <= data_p_keep_V_2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (cmp_i_i120 = ap_const_lv1_1) and (icmp_ln1027_fu_427_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                data_p_keep_V_fu_162 <= src_TKEEP;
            end if; 
        end if;
    end process;

    data_p_strb_V_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                data_p_strb_V_fu_158 <= data_p_strb_V_2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (cmp_i_i120 = ap_const_lv1_1) and (icmp_ln1027_fu_427_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                data_p_strb_V_fu_158 <= src_TSTRB;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_reg_973_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                A00_reg_1058 <= A00_fu_609_p2;
                WindowBuffer_30_out_load_reg_1029 <= WindowBuffer_30_out_i;
                add_ln9_reg_1053 <= add_ln9_fu_569_p2;
                tmp_1_reg_1039 <= tmp_1_fu_513_p5;
                tmp_2_reg_1045 <= tmp_2_fu_524_p5;
                tmp_reg_1034 <= tmp_fu_502_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1027_reg_973 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                LineBuffer_1_addr_reg_994 <= zext_ln541_fu_475_p1(11 - 1 downto 0);
                LineBuffer_2_addr_reg_999 <= zext_ln541_fu_475_p1(11 - 1 downto 0);
                LineBuffer_addr_reg_989 <= zext_ln541_fu_475_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                WindowBuffer_31_load_reg_1014 <= WindowBuffer_31_fu_166;
                WindowBuffer_33_load_reg_1024 <= WindowBuffer_33_fu_174;
                WindowBuffer_35_load_reg_1019 <= WindowBuffer_35_fu_170;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                col_V_reg_968 <= col_V_2_fu_154;
                data_p_last_V_reg_984_pp0_iter1_reg <= data_p_last_V_reg_984;
                icmp_ln1027_reg_973 <= icmp_ln1027_fu_427_p2;
                icmp_ln1027_reg_973_pp0_iter1_reg <= icmp_ln1027_reg_973;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1027_fu_427_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                data_p_last_V_reg_984 <= data_p_last_V_fu_465_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                data_p_last_V_reg_984_pp0_iter2_reg <= data_p_last_V_reg_984_pp0_iter1_reg;
                data_p_last_V_reg_984_pp0_iter3_reg <= data_p_last_V_reg_984_pp0_iter2_reg;
                data_p_last_V_reg_984_pp0_iter4_reg <= data_p_last_V_reg_984_pp0_iter3_reg;
                g_x_reg_1063 <= g_x_fu_760_p3;
                icmp_ln1027_reg_973_pp0_iter2_reg <= icmp_ln1027_reg_973_pp0_iter1_reg;
                icmp_ln42_reg_1080 <= icmp_ln42_fu_807_p2;
                tmp_2_reg_1045_pp0_iter4_reg <= tmp_2_reg_1045;
                tmp_5_reg_1074 <= out_pix_4_fu_783_p2(10 downto 10);
                tmp_keep_V_reg_1009_pp0_iter2_reg <= tmp_keep_V_reg_1009;
                tmp_keep_V_reg_1009_pp0_iter3_reg <= tmp_keep_V_reg_1009_pp0_iter2_reg;
                tmp_keep_V_reg_1009_pp0_iter4_reg <= tmp_keep_V_reg_1009_pp0_iter3_reg;
                tmp_strb_V_reg_1004_pp0_iter2_reg <= tmp_strb_V_reg_1004;
                tmp_strb_V_reg_1004_pp0_iter3_reg <= tmp_strb_V_reg_1004_pp0_iter2_reg;
                tmp_strb_V_reg_1004_pp0_iter4_reg <= tmp_strb_V_reg_1004_pp0_iter3_reg;
                trunc_ln36_reg_1069 <= trunc_ln36_fu_779_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (cmp_i_i120 = ap_const_lv1_1) and (icmp_ln1027_fu_427_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_data_V_reg_977 <= src_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1027_reg_973 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_keep_V_reg_1009 <= data_p_keep_V_fu_162;
                tmp_strb_V_reg_1004 <= data_p_strb_V_fu_158;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    A00_fu_609_p2 <= std_logic_vector(unsigned(zext_ln31_fu_605_p1) - unsigned(zext_ln29_fu_583_p1));
    LineBuffer_1_address0 <= zext_ln541_fu_475_p1(11 - 1 downto 0);
    LineBuffer_1_address1 <= LineBuffer_1_addr_reg_994;

    LineBuffer_1_ce0_assign_proc : process(cmp_i_i120, ap_CS_fsm_pp0_stage0, cmp_i_i120_read_read_fu_178_p2, btm_V_1_read_read_fu_196_p2, ap_block_pp0_stage0_11001, icmp_ln1027_reg_973, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1027_reg_973 = ap_const_lv1_1) and (btm_V_1_read_read_fu_196_p2 = ap_const_lv2_1) and (cmp_i_i120_read_read_fu_178_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1027_reg_973 = ap_const_lv1_1) and (btm_V_1_read_read_fu_196_p2 = ap_const_lv2_1) and (cmp_i_i120 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            LineBuffer_1_ce0 <= ap_const_logic_1;
        else 
            LineBuffer_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuffer_1_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            LineBuffer_1_ce1 <= ap_const_logic_1;
        else 
            LineBuffer_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuffer_1_d0_assign_proc : process(cmp_i_i120, cmp_i_i120_read_read_fu_178_p2, tmp_data_V_reg_977, ap_condition_677)
    begin
        if ((ap_const_boolean_1 = ap_condition_677)) then
            if ((cmp_i_i120 = ap_const_lv1_1)) then 
                LineBuffer_1_d0 <= tmp_data_V_reg_977;
            elsif ((cmp_i_i120_read_read_fu_178_p2 = ap_const_lv1_0)) then 
                LineBuffer_1_d0 <= ap_const_lv8_0;
            else 
                LineBuffer_1_d0 <= "XXXXXXXX";
            end if;
        else 
            LineBuffer_1_d0 <= "XXXXXXXX";
        end if; 
    end process;


    LineBuffer_1_we0_assign_proc : process(cmp_i_i120, ap_CS_fsm_pp0_stage0, cmp_i_i120_read_read_fu_178_p2, btm_V_1_read_read_fu_196_p2, ap_block_pp0_stage0_11001, icmp_ln1027_reg_973, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1027_reg_973 = ap_const_lv1_1) and (btm_V_1_read_read_fu_196_p2 = ap_const_lv2_1) and (cmp_i_i120_read_read_fu_178_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1027_reg_973 = ap_const_lv1_1) and (btm_V_1_read_read_fu_196_p2 = ap_const_lv2_1) and (cmp_i_i120 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            LineBuffer_1_we0 <= ap_const_logic_1;
        else 
            LineBuffer_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    LineBuffer_2_address0 <= zext_ln541_fu_475_p1(11 - 1 downto 0);
    LineBuffer_2_address1 <= LineBuffer_2_addr_reg_999;

    LineBuffer_2_ce0_assign_proc : process(cmp_i_i120, ap_CS_fsm_pp0_stage0, cmp_i_i120_read_read_fu_178_p2, btm_V_1_read_read_fu_196_p2, ap_block_pp0_stage0_11001, icmp_ln1027_reg_973, ap_enable_reg_pp0_iter1)
    begin
        if (((not((btm_V_1_read_read_fu_196_p2 = ap_const_lv2_0)) and not((btm_V_1_read_read_fu_196_p2 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1027_reg_973 = ap_const_lv1_1) and (cmp_i_i120_read_read_fu_178_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not((btm_V_1_read_read_fu_196_p2 = ap_const_lv2_0)) and not((btm_V_1_read_read_fu_196_p2 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1027_reg_973 = ap_const_lv1_1) and (cmp_i_i120 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            LineBuffer_2_ce0 <= ap_const_logic_1;
        else 
            LineBuffer_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuffer_2_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            LineBuffer_2_ce1 <= ap_const_logic_1;
        else 
            LineBuffer_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuffer_2_d0_assign_proc : process(cmp_i_i120, cmp_i_i120_read_read_fu_178_p2, tmp_data_V_reg_977, ap_condition_681)
    begin
        if ((ap_const_boolean_1 = ap_condition_681)) then
            if ((cmp_i_i120 = ap_const_lv1_1)) then 
                LineBuffer_2_d0 <= tmp_data_V_reg_977;
            elsif ((cmp_i_i120_read_read_fu_178_p2 = ap_const_lv1_0)) then 
                LineBuffer_2_d0 <= ap_const_lv8_0;
            else 
                LineBuffer_2_d0 <= "XXXXXXXX";
            end if;
        else 
            LineBuffer_2_d0 <= "XXXXXXXX";
        end if; 
    end process;


    LineBuffer_2_we0_assign_proc : process(cmp_i_i120, ap_CS_fsm_pp0_stage0, cmp_i_i120_read_read_fu_178_p2, btm_V_1_read_read_fu_196_p2, ap_block_pp0_stage0_11001, icmp_ln1027_reg_973, ap_enable_reg_pp0_iter1)
    begin
        if (((not((btm_V_1_read_read_fu_196_p2 = ap_const_lv2_0)) and not((btm_V_1_read_read_fu_196_p2 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1027_reg_973 = ap_const_lv1_1) and (cmp_i_i120_read_read_fu_178_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not((btm_V_1_read_read_fu_196_p2 = ap_const_lv2_0)) and not((btm_V_1_read_read_fu_196_p2 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1027_reg_973 = ap_const_lv1_1) and (cmp_i_i120 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            LineBuffer_2_we0 <= ap_const_logic_1;
        else 
            LineBuffer_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    LineBuffer_address0 <= zext_ln541_fu_475_p1(11 - 1 downto 0);
    LineBuffer_address1 <= LineBuffer_addr_reg_989;

    LineBuffer_ce0_assign_proc : process(cmp_i_i120, ap_CS_fsm_pp0_stage0, cmp_i_i120_read_read_fu_178_p2, btm_V_1_read_read_fu_196_p2, ap_block_pp0_stage0_11001, icmp_ln1027_reg_973, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1027_reg_973 = ap_const_lv1_1) and (btm_V_1_read_read_fu_196_p2 = ap_const_lv2_0) and (cmp_i_i120_read_read_fu_178_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1027_reg_973 = ap_const_lv1_1) and (btm_V_1_read_read_fu_196_p2 = ap_const_lv2_0) and (cmp_i_i120 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            LineBuffer_ce0 <= ap_const_logic_1;
        else 
            LineBuffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuffer_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            LineBuffer_ce1 <= ap_const_logic_1;
        else 
            LineBuffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    LineBuffer_d0_assign_proc : process(cmp_i_i120, cmp_i_i120_read_read_fu_178_p2, tmp_data_V_reg_977, ap_condition_684)
    begin
        if ((ap_const_boolean_1 = ap_condition_684)) then
            if ((cmp_i_i120 = ap_const_lv1_1)) then 
                LineBuffer_d0 <= tmp_data_V_reg_977;
            elsif ((cmp_i_i120_read_read_fu_178_p2 = ap_const_lv1_0)) then 
                LineBuffer_d0 <= ap_const_lv8_0;
            else 
                LineBuffer_d0 <= "XXXXXXXX";
            end if;
        else 
            LineBuffer_d0 <= "XXXXXXXX";
        end if; 
    end process;


    LineBuffer_we0_assign_proc : process(cmp_i_i120, ap_CS_fsm_pp0_stage0, cmp_i_i120_read_read_fu_178_p2, btm_V_1_read_read_fu_196_p2, ap_block_pp0_stage0_11001, icmp_ln1027_reg_973, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1027_reg_973 = ap_const_lv1_1) and (btm_V_1_read_read_fu_196_p2 = ap_const_lv2_0) and (cmp_i_i120_read_read_fu_178_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1027_reg_973 = ap_const_lv1_1) and (btm_V_1_read_read_fu_196_p2 = ap_const_lv2_0) and (cmp_i_i120 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            LineBuffer_we0 <= ap_const_logic_1;
        else 
            LineBuffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    M00_1_fu_575_p3 <= (WindowBuffer_31_fu_166 & ap_const_lv1_0);
    M00_fu_535_p3 <= (WindowBuffer_32_out_i & ap_const_lv1_0);
    M01_1_fu_587_p3 <= (WindowBuffer_35_fu_170 & ap_const_lv1_0);
    M01_fu_648_p3 <= (tmp_1_reg_1039 & ap_const_lv1_0);
    S00_fu_773_p2 <= std_logic_vector(unsigned(out_pix_7_fu_768_p2) - unsigned(zext_ln9_fu_659_p1));

    WindowBuffer_30_out_o_assign_proc : process(ap_CS_fsm_state1, WindowBuffer_27, WindowBuffer_30_out_i, ap_block_pp0_stage0, icmp_ln1027_reg_973_pp0_iter2_reg, ap_enable_reg_pp0_iter3, WindowBuffer_31_fu_166)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            WindowBuffer_30_out_o <= WindowBuffer_27;
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1027_reg_973_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            WindowBuffer_30_out_o <= WindowBuffer_31_fu_166;
        else 
            WindowBuffer_30_out_o <= WindowBuffer_30_out_i;
        end if; 
    end process;


    WindowBuffer_30_out_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_pp0_stage0_11001, icmp_ln1027_reg_973_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1027_reg_973_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            WindowBuffer_30_out_o_ap_vld <= ap_const_logic_1;
        else 
            WindowBuffer_30_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    WindowBuffer_31_out <= WindowBuffer_31_load_reg_1014;

    WindowBuffer_31_out_ap_vld_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            WindowBuffer_31_out_ap_vld <= ap_const_logic_1;
        else 
            WindowBuffer_31_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    WindowBuffer_32_out_o_assign_proc : process(ap_CS_fsm_state1, WindowBuffer_28, WindowBuffer_32_out_i, ap_block_pp0_stage0, icmp_ln1027_reg_973_pp0_iter2_reg, ap_enable_reg_pp0_iter3, WindowBuffer_33_fu_174)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            WindowBuffer_32_out_o <= WindowBuffer_28;
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1027_reg_973_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            WindowBuffer_32_out_o <= WindowBuffer_33_fu_174;
        else 
            WindowBuffer_32_out_o <= WindowBuffer_32_out_i;
        end if; 
    end process;


    WindowBuffer_32_out_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_pp0_stage0_11001, icmp_ln1027_reg_973_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1027_reg_973_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            WindowBuffer_32_out_o_ap_vld <= ap_const_logic_1;
        else 
            WindowBuffer_32_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    WindowBuffer_33_out <= WindowBuffer_33_load_reg_1024;

    WindowBuffer_33_out_ap_vld_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            WindowBuffer_33_out_ap_vld <= ap_const_logic_1;
        else 
            WindowBuffer_33_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    WindowBuffer_34_out_o_assign_proc : process(ap_CS_fsm_state1, WindowBuffer_29, WindowBuffer_34_out_i, ap_block_pp0_stage0, icmp_ln1027_reg_973_pp0_iter2_reg, ap_enable_reg_pp0_iter3, WindowBuffer_35_fu_170)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            WindowBuffer_34_out_o <= WindowBuffer_29;
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1027_reg_973_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            WindowBuffer_34_out_o <= WindowBuffer_35_fu_170;
        else 
            WindowBuffer_34_out_o <= WindowBuffer_34_out_i;
        end if; 
    end process;


    WindowBuffer_34_out_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_pp0_stage0_11001, icmp_ln1027_reg_973_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln1027_reg_973_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            WindowBuffer_34_out_o_ap_vld <= ap_const_logic_1;
        else 
            WindowBuffer_34_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    WindowBuffer_35_out <= WindowBuffer_35_load_reg_1019;

    WindowBuffer_35_out_ap_vld_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            WindowBuffer_35_out_ap_vld <= ap_const_logic_1;
        else 
            WindowBuffer_35_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln14_fu_689_p2 <= std_logic_vector(unsigned(zext_ln8_fu_655_p1) + unsigned(zext_ln10_1_fu_665_p1));
    add_ln24_1_fu_729_p2 <= std_logic_vector(unsigned(shl_ln10_fu_680_p2) + unsigned(tmp_2_reg_1045));
    add_ln24_fu_734_p2 <= std_logic_vector(unsigned(add_ln24_1_fu_729_p2) + unsigned(trunc_ln10_fu_685_p1));
    add_ln46_fu_813_p2 <= std_logic_vector(unsigned(trunc_ln36_reg_1069) + unsigned(tmp_2_reg_1045_pp0_iter4_reg));
    add_ln9_1_fu_559_p2 <= std_logic_vector(unsigned(zext_ln10_3_fu_547_p1) + unsigned(zext_ln11_1_fu_555_p1));
    add_ln9_fu_569_p2 <= std_logic_vector(unsigned(zext_ln9_1_fu_565_p1) + unsigned(zext_ln7_fu_543_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(2);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(dst_TREADY, src_TVALID, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter0, ap_predicate_op57_read_state2)
    begin
                ap_block_pp0_stage0_01001 <= (((dst_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((src_TVALID = ap_const_logic_0) and (ap_predicate_op57_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(dst_TREADY, src_TVALID, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter0, ap_predicate_op57_read_state2)
    begin
                ap_block_pp0_stage0_11001 <= (((dst_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((src_TVALID = ap_const_logic_0) and (ap_predicate_op57_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(dst_TREADY, src_TVALID, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter0, ap_predicate_op57_read_state2)
    begin
                ap_block_pp0_stage0_subdone <= (((dst_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((src_TVALID = ap_const_logic_0) and (ap_predicate_op57_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(src_TVALID, ap_predicate_op57_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((src_TVALID = ap_const_logic_0) and (ap_predicate_op57_read_state2 = ap_const_boolean_1));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter5_assign_proc : process(dst_TREADY)
    begin
                ap_block_state7_pp0_stage0_iter5 <= (dst_TREADY = ap_const_logic_0);
    end process;


    ap_condition_677_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp0_stage0, btm_V_1_read_read_fu_196_p2, icmp_ln1027_reg_973, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_677 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1027_reg_973 = ap_const_lv1_1) and (btm_V_1_read_read_fu_196_p2 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_681_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp0_stage0, btm_V_1_read_read_fu_196_p2, icmp_ln1027_reg_973, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_681 <= (not((btm_V_1_read_read_fu_196_p2 = ap_const_lv2_0)) and not((btm_V_1_read_read_fu_196_p2 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1027_reg_973 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_684_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp0_stage0, btm_V_1_read_read_fu_196_p2, icmp_ln1027_reg_973, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_684 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln1027_reg_973 = ap_const_lv1_1) and (btm_V_1_read_read_fu_196_p2 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_pp0_exit_iter3_state5_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_condition_pp0_exit_iter3_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter3_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1027_fu_427_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1027_fu_427_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op57_read_state2_assign_proc : process(cmp_i_i120, icmp_ln1027_fu_427_p2)
    begin
                ap_predicate_op57_read_state2 <= ((cmp_i_i120 = ap_const_lv1_1) and (icmp_ln1027_fu_427_p2 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    btm_V_1_read_read_fu_196_p2 <= btm_V_1;
    cmp_i_i120_read_read_fu_178_p2 <= cmp_i_i120;
    col_V_3_fu_432_p2 <= std_logic_vector(unsigned(col_V_2_fu_154) + unsigned(ap_const_lv13_1));
    data_p_keep_V_3_out <= data_p_keep_V_fu_162;

    data_p_keep_V_3_out_ap_vld_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            data_p_keep_V_3_out_ap_vld <= ap_const_logic_1;
        else 
            data_p_keep_V_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    data_p_last_V_fu_465_p2 <= (icmp_ln1019_fu_460_p2 and cmp_i_i78);
    data_p_strb_V_3_out <= data_p_strb_V_fu_158;

    data_p_strb_V_3_out_ap_vld_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            data_p_strb_V_3_out_ap_vld <= ap_const_logic_1;
        else 
            data_p_strb_V_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    dst_TDATA <= 
        ap_const_lv8_FF when (tmp_7_fu_855_p3(0) = '1') else 
        sobel_1_fu_863_p2;

    dst_TDATA_blk_n_assign_proc : process(dst_TREADY, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            dst_TDATA_blk_n <= dst_TREADY;
        else 
            dst_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dst_TKEEP <= tmp_keep_V_reg_1009_pp0_iter4_reg;
    dst_TLAST <= data_p_last_V_reg_984_pp0_iter4_reg;
    dst_TSTRB <= tmp_strb_V_reg_1004_pp0_iter4_reg;

    dst_TVALID_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            dst_TVALID <= ap_const_logic_1;
        else 
            dst_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    g_x_fu_760_p3 <= 
        select_ln24_fu_746_p3 when (or_ln24_fu_754_p2(0) = '1') else 
        add_ln24_fu_734_p2;
    g_y_fu_834_p3 <= 
        select_ln46_fu_822_p3 when (or_ln46_fu_830_p2(0) = '1') else 
        add_ln46_fu_813_p2;
    icmp_ln1019_fu_460_p2 <= "1" when (op2_assign = zext_ln1027_fu_423_p1) else "0";
    icmp_ln1027_fu_427_p2 <= "1" when (signed(zext_ln1027_fu_423_p1) < signed(cols)) else "0";
    icmp_ln20_fu_723_p2 <= "1" when (signed(tmp_4_fu_713_p4) > signed(ap_const_lv3_0)) else "0";
    icmp_ln42_fu_807_p2 <= "1" when (signed(tmp_6_fu_797_p4) > signed(ap_const_lv3_0)) else "0";
    or_ln24_fu_754_p2 <= (tmp_3_fu_705_p3 or icmp_ln20_fu_723_p2);
    or_ln46_fu_830_p2 <= (tmp_5_reg_1074 or icmp_ln42_reg_1080);
    out_pix_4_fu_783_p2 <= std_logic_vector(unsigned(S00_fu_773_p2) + unsigned(zext_ln10_fu_662_p1));
    out_pix_5_fu_674_p2 <= std_logic_vector(unsigned(zext_ln9_fu_659_p1) - unsigned(zext_ln13_fu_671_p1));
    out_pix_6_fu_599_p2 <= std_logic_vector(unsigned(zext_ln30_fu_595_p1) + unsigned(zext_ln11_fu_551_p1));
    out_pix_7_fu_768_p2 <= std_logic_vector(unsigned(A00_reg_1058) - unsigned(zext_ln10_2_fu_668_p1));
    out_pix_fu_699_p2 <= std_logic_vector(unsigned(zext_ln14_fu_695_p1) + unsigned(out_pix_5_fu_674_p2));
    select_ln24_fu_746_p3 <= 
        ap_const_lv8_FF when (xor_ln24_fu_740_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln46_fu_822_p3 <= 
        ap_const_lv8_FF when (xor_ln46_fu_817_p2(0) = '1') else 
        ap_const_lv8_0;
    shl_ln10_fu_680_p2 <= std_logic_vector(shift_left(unsigned(tmp_1_reg_1039),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    sobel_1_fu_863_p2 <= std_logic_vector(unsigned(g_x_reg_1063) + unsigned(g_y_fu_834_p3));

    src_TDATA_blk_n_assign_proc : process(src_TVALID, cmp_i_i120, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln1027_fu_427_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (cmp_i_i120 = ap_const_lv1_1) and (icmp_ln1027_fu_427_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            src_TDATA_blk_n <= src_TVALID;
        else 
            src_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_predicate_op57_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op57_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            src_TREADY <= ap_const_logic_1;
        else 
            src_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    temp_fu_849_p2 <= std_logic_vector(unsigned(zext_ln55_fu_842_p1) + unsigned(zext_ln55_1_fu_845_p1));
    tmp_3_fu_705_p3 <= out_pix_fu_699_p2(10 downto 10);
    tmp_4_fu_713_p4 <= out_pix_fu_699_p2(10 downto 8);
    tmp_6_fu_797_p4 <= out_pix_4_fu_783_p2(10 downto 8);
    tmp_7_fu_855_p3 <= temp_fu_849_p2(8 downto 8);
    trunc_ln10_fu_685_p1 <= out_pix_5_fu_674_p2(8 - 1 downto 0);
    trunc_ln36_fu_779_p1 <= S00_fu_773_p2(8 - 1 downto 0);
    xor_ln24_fu_740_p2 <= (tmp_3_fu_705_p3 xor ap_const_lv1_1);
    xor_ln46_fu_817_p2 <= (tmp_5_reg_1074 xor ap_const_lv1_1);
    zext_ln1027_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_V_2_fu_154),32));
    zext_ln10_1_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_1045),10));
    zext_ln10_2_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(WindowBuffer_30_out_load_reg_1029),11));
    zext_ln10_3_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(WindowBuffer_30_out_i),9));
    zext_ln10_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_1045),11));
    zext_ln11_1_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(WindowBuffer_34_out_i),9));
    zext_ln11_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(WindowBuffer_34_out_i),10));
    zext_ln13_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_reg_1053),11));
    zext_ln14_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln14_fu_689_p2),11));
    zext_ln29_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(M00_1_fu_575_p3),11));
    zext_ln30_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(M01_1_fu_587_p3),10));
    zext_ln31_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_pix_6_fu_599_p2),11));
    zext_ln541_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_V_reg_968),64));
    zext_ln55_1_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(g_y_fu_834_p3),9));
    zext_ln55_fu_842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(g_x_reg_1063),9));
    zext_ln7_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(M00_fu_535_p3),10));
    zext_ln8_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(M01_fu_648_p3),10));
    zext_ln9_1_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_1_fu_559_p2),10));
    zext_ln9_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1034),11));
end behav;
